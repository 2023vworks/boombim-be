import { MigrationInterface, QueryRunner } from "typeorm";

export class InitTable1701198400328 implements MigrationInterface {
    name = 'InitTable1701198400328'

    public async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`CREATE TABLE "admin" ("id" SERIAL NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "deletedAt" TIMESTAMP WITH TIME ZONE, "nickname" character varying(50) NOT NULL, "token" character varying(300) NOT NULL DEFAULT 'admin', "accessedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "isActive" boolean NOT NULL DEFAULT false, CONSTRAINT "PK-admin-id" PRIMARY KEY ("id")); COMMENT ON COLUMN "admin"."nickname" IS '관리자 닉네임'; COMMENT ON COLUMN "admin"."token" IS '토큰'; COMMENT ON COLUMN "admin"."accessedAt" IS '마지막 접속일'; COMMENT ON COLUMN "admin"."isActive" IS '활성화 여부'`);
        await queryRunner.query(`CREATE TABLE "address" ("id" SERIAL NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "deletedAt" TIMESTAMP WITH TIME ZONE, "addressName" character varying NOT NULL, "region1DepthName" character varying NOT NULL, "region2DepthName" character varying NOT NULL, "region3DepthName" character varying NOT NULL, "mountainYn" character(1) NOT NULL, "mainAddressNo" character varying NOT NULL, "subAddressNo" character varying NOT NULL, CONSTRAINT "PK-address-id" PRIMARY KEY ("id")); COMMENT ON COLUMN "address"."addressName" IS '전체 지번 주소'; COMMENT ON COLUMN "address"."region1DepthName" IS '지역 1 Depth, 시도 단위'; COMMENT ON COLUMN "address"."region2DepthName" IS '지역 2 Depth, 시도 단위'; COMMENT ON COLUMN "address"."region3DepthName" IS '지역 3 Depth, 동 단위'; COMMENT ON COLUMN "address"."mountainYn" IS '산 여부, Y 또는 N'; COMMENT ON COLUMN "address"."mainAddressNo" IS '지번 주번지'; COMMENT ON COLUMN "address"."subAddressNo" IS '지번 부번지, 없을 경우 빈 문자열("") 반환'`);
        await queryRunner.query(`CREATE TYPE "public"."region_info_regiontype_enum" AS ENUM('H', 'B')`);
        await queryRunner.query(`CREATE TABLE "region_info" ("id" SERIAL NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "deletedAt" TIMESTAMP WITH TIME ZONE, "regionType" "public"."region_info_regiontype_enum" NOT NULL, "addressName" character varying NOT NULL, "region1DepthName" character varying NOT NULL, "region2DepthName" character varying NOT NULL, "region3DepthName" character varying NOT NULL, "region4DepthName" character varying NOT NULL, "code" character varying NOT NULL, "x" numeric NOT NULL, "y" numeric NOT NULL, CONSTRAINT "PK-region_info-id" PRIMARY KEY ("id")); COMMENT ON COLUMN "region_info"."regionType" IS 'H(행정동) 또는 B(법정동)'; COMMENT ON COLUMN "region_info"."addressName" IS '전체 지역 명칭'; COMMENT ON COLUMN "region_info"."region1DepthName" IS '지역 1Depth, 시도 단위 바다 영역은 존재하지 않음'; COMMENT ON COLUMN "region_info"."region2DepthName" IS '지역 2Depth, 구 단위 바다 영역은 존재하지 않음'; COMMENT ON COLUMN "region_info"."region3DepthName" IS '지역 3Depth, 동 단위 바다 영역은 존재하지 않음'; COMMENT ON COLUMN "region_info"."region4DepthName" IS '지역 4Depth, 리 영역인 경우만 존재 regionType이 법정동이며;'; COMMENT ON COLUMN "region_info"."code" IS 'region 코드'; COMMENT ON COLUMN "region_info"."x" IS '경도(x좌표)'; COMMENT ON COLUMN "region_info"."y" IS '위도(y좌표)'`);
        await queryRunner.query(`CREATE TABLE "road_address" ("id" SERIAL NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "deletedAt" TIMESTAMP WITH TIME ZONE, "addressName" character varying NOT NULL, "region1DepthName" character varying NOT NULL, "region2DepthName" character varying NOT NULL, "region3DepthName" character varying NOT NULL, "roadName" character varying NOT NULL, "undergroundYn" character(1) NOT NULL, "mainBuildingNo" character varying NOT NULL, "subBuildingNo" character varying NOT NULL, "buildingName" character varying NOT NULL, "zoneNo" character(5) NOT NULL, CONSTRAINT "PK-road_address-id" PRIMARY KEY ("id")); COMMENT ON COLUMN "road_address"."addressName" IS '전체 도로명 주소'; COMMENT ON COLUMN "road_address"."region1DepthName" IS '지역명1'; COMMENT ON COLUMN "road_address"."region2DepthName" IS '지역명2'; COMMENT ON COLUMN "road_address"."region3DepthName" IS '지역명3'; COMMENT ON COLUMN "road_address"."roadName" IS '도로명'; COMMENT ON COLUMN "road_address"."undergroundYn" IS '지하 여부, Y 또는 N'; COMMENT ON COLUMN "road_address"."mainBuildingNo" IS '건물 본번'; COMMENT ON COLUMN "road_address"."subBuildingNo" IS '건물 부번, 없을 경우 빈 문자열("") 반환'; COMMENT ON COLUMN "road_address"."buildingName" IS '건물 이름'; COMMENT ON COLUMN "road_address"."zoneNo" IS '우편번호(5자리)'`);
        await queryRunner.query(`CREATE TYPE "public"."geo_mark_type_enum" AS ENUM('WGS84', 'WCONGNAMUL', 'CONGNAMUL', 'WGS84GEO', 'WCONGNAMULGEO', 'CONGNAMULGEO')`);
        await queryRunner.query(`CREATE TYPE "public"."geo_mark_regiontype_enum" AS ENUM('H', 'B')`);
        await queryRunner.query(`CREATE TABLE "geo_mark" ("id" SERIAL NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "deletedAt" TIMESTAMP WITH TIME ZONE, "x" numeric NOT NULL, "y" numeric NOT NULL, "type" "public"."geo_mark_type_enum" NOT NULL DEFAULT 'WGS84', "point" geometry NOT NULL, "srid" smallint NOT NULL DEFAULT '4326', "regionType" "public"."geo_mark_regiontype_enum" NOT NULL, "region" character varying NOT NULL, "regionInfoId" integer, "addressId" integer, "roadAddressId" integer, CONSTRAINT "REL-geo_mark-regionInfoId" UNIQUE ("regionInfoId"), CONSTRAINT "REL-geo_mark-addressId" UNIQUE ("addressId"), CONSTRAINT "REL-geo_mark-roadAddressId" UNIQUE ("roadAddressId"), CONSTRAINT "PK-geo_mark-id" PRIMARY KEY ("id")); COMMENT ON COLUMN "geo_mark"."x" IS '경도(x좌표)'; COMMENT ON COLUMN "geo_mark"."y" IS '위도(y좌표)'; COMMENT ON COLUMN "geo_mark"."type" IS '좌표계 타입'; COMMENT ON COLUMN "geo_mark"."srid" IS 'SRID 식별자'; COMMENT ON COLUMN "geo_mark"."regionType" IS 'H(행정동) 또는 B(법정동)'; COMMENT ON COLUMN "geo_mark"."region" IS 'GeoMark가 속하는 지역 이름, regionType(행정동 or 법정동)에 따른 지역 명칭'`);
        await queryRunner.query(`CREATE TYPE "public"."polygon_info_regiontype_enum" AS ENUM('H', 'B')`);
        await queryRunner.query(`CREATE TABLE "polygon_info" ("id" SERIAL NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "deletedAt" TIMESTAMP WITH TIME ZONE, "addressPart" character varying NOT NULL, "city" character varying NOT NULL, "gu" character varying NOT NULL, "dong" character varying NOT NULL, "regionType" "public"."polygon_info_regiontype_enum" NOT NULL DEFAULT 'H', "polygon" geometry NOT NULL, CONSTRAINT "PK-polygon_info-id" PRIMARY KEY ("id")); COMMENT ON COLUMN "polygon_info"."addressPart" IS '시 구 동 이름'; COMMENT ON COLUMN "polygon_info"."city" IS '시 이름'; COMMENT ON COLUMN "polygon_info"."gu" IS '구 이름'; COMMENT ON COLUMN "polygon_info"."dong" IS '동 이름'; COMMENT ON COLUMN "polygon_info"."regionType" IS 'H(행정동) 또는 B(법정동)'`);
        await queryRunner.query(`CREATE TYPE "public"."recommend_history_type_enum" AS ENUM('Recommend', 'Unrecommend')`);
        await queryRunner.query(`CREATE TABLE "recommend_history" ("id" SERIAL NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "deletedAt" TIMESTAMP WITH TIME ZONE, "type" "public"."recommend_history_type_enum" NOT NULL, "feedId" integer NOT NULL, "userId" integer NOT NULL, CONSTRAINT "PK-recommend_history-id" PRIMARY KEY ("id")); COMMENT ON COLUMN "recommend_history"."type" IS 'MBTI 유형'`);
        await queryRunner.query(`CREATE TABLE "report_history" ("id" SERIAL NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "deletedAt" TIMESTAMP WITH TIME ZONE, "reason" character varying(200) NOT NULL, "feedId" integer NOT NULL, "userId" integer NOT NULL, CONSTRAINT "PK-report_history-id" PRIMARY KEY ("id")); COMMENT ON COLUMN "report_history"."reason" IS '신고 사유'`);
        await queryRunner.query(`CREATE TABLE "feed" ("id" SERIAL NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "deletedAt" TIMESTAMP WITH TIME ZONE, "activity" smallint NOT NULL DEFAULT '1', "content" character varying(420) NOT NULL, "thumbnailImages" text array NOT NULL DEFAULT '{}', "images" text array NOT NULL DEFAULT '{}', "hashTags" text array NOT NULL DEFAULT '{}', "activationAt" TIMESTAMP WITH TIME ZONE NOT NULL, "recommendCount" integer NOT NULL DEFAULT '0', "unrecommendCount" integer NOT NULL DEFAULT '0', "reportCount" integer NOT NULL DEFAULT '0', "viewCount" integer NOT NULL DEFAULT '0', "commentCount" integer NOT NULL DEFAULT '0', "geoMarkId" integer NOT NULL, "userId" integer NOT NULL, CONSTRAINT "REL-feed-geoMarkId" UNIQUE ("geoMarkId"), CONSTRAINT "PK-feed-id" PRIMARY KEY ("id")); COMMENT ON COLUMN "feed"."activity" IS '피드 활성도'; COMMENT ON COLUMN "feed"."content" IS '피드 내용'; COMMENT ON COLUMN "feed"."thumbnailImages" IS '썸네일 이미지 리스트'; COMMENT ON COLUMN "feed"."images" IS '이미지 리스트'; COMMENT ON COLUMN "feed"."hashTags" IS '해시태그 리스트'; COMMENT ON COLUMN "feed"."activationAt" IS '피드 활성화 시간'; COMMENT ON COLUMN "feed"."recommendCount" IS '추천수'; COMMENT ON COLUMN "feed"."unrecommendCount" IS '비추천수'; COMMENT ON COLUMN "feed"."reportCount" IS '신고수'; COMMENT ON COLUMN "feed"."viewCount" IS '조회수'; COMMENT ON COLUMN "feed"."commentCount" IS '댓글수'`);
        await queryRunner.query(`CREATE TYPE "public"."user_mbtitype_enum" AS ENUM('ISTJ', 'ISFJ', 'INFJ', 'INTJ', 'ISTP', 'ISFP', 'INFP', 'INTP', 'ESTP', 'ESFP', 'ENFP', 'ENTP', 'ESTJ', 'ESFJ', 'ENFJ', 'ENTJ')`);
        await queryRunner.query(`CREATE TABLE "user" ("id" SERIAL NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "deletedAt" TIMESTAMP WITH TIME ZONE, "mbtiType" "public"."user_mbtitype_enum" NOT NULL, "nickname" character varying(50) NOT NULL DEFAULT '0000', "token" character varying(300) NOT NULL DEFAULT '', "accessedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "feedWritingCount" smallint NOT NULL DEFAULT '5', "feedWritingCountRechargeStartAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(), "agreementTerms" boolean NOT NULL DEFAULT false, CONSTRAINT "PK-user-id" PRIMARY KEY ("id")); COMMENT ON COLUMN "user"."mbtiType" IS 'MBTI 유형'; COMMENT ON COLUMN "user"."nickname" IS '닉네임'; COMMENT ON COLUMN "user"."token" IS 'JWT 토큰'; COMMENT ON COLUMN "user"."accessedAt" IS '마지막 접속일'; COMMENT ON COLUMN "user"."feedWritingCount" IS '피드 작성 가능 횟수'; COMMENT ON COLUMN "user"."feedWritingCountRechargeStartAt" IS '피드 작성 횟수 충전 시작 시간 날짜'; COMMENT ON COLUMN "user"."agreementTerms" IS '약관 동의'`);
        await queryRunner.query(`CREATE TABLE "comment" ("id" SERIAL NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(), "deletedAt" TIMESTAMP WITH TIME ZONE, "content" character varying(420) NOT NULL, "userId" integer NOT NULL, "feedId" integer NOT NULL, CONSTRAINT "PK-comment-id" PRIMARY KEY ("id")); COMMENT ON COLUMN "comment"."content" IS '댓글 내용'`);
        await queryRunner.query(`ALTER TABLE "geo_mark" ADD CONSTRAINT "FK-region_info-geo_mark" FOREIGN KEY ("regionInfoId") REFERENCES "region_info"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "geo_mark" ADD CONSTRAINT "FK-address-geo_mark" FOREIGN KEY ("addressId") REFERENCES "address"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "geo_mark" ADD CONSTRAINT "FK-road_address-geo_mark" FOREIGN KEY ("roadAddressId") REFERENCES "road_address"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "recommend_history" ADD CONSTRAINT "FK-feed-recommend_history" FOREIGN KEY ("feedId") REFERENCES "feed"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "recommend_history" ADD CONSTRAINT "FK-user-recommend_history" FOREIGN KEY ("userId") REFERENCES "user"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "report_history" ADD CONSTRAINT "FK-feed-report_history" FOREIGN KEY ("feedId") REFERENCES "feed"("id") ON DELETE SET NULL ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "report_history" ADD CONSTRAINT "FK-user-report_history" FOREIGN KEY ("userId") REFERENCES "user"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "feed" ADD CONSTRAINT "FK-geo_mark-feed" FOREIGN KEY ("geoMarkId") REFERENCES "geo_mark"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "feed" ADD CONSTRAINT "FK-user-feed" FOREIGN KEY ("userId") REFERENCES "user"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "comment" ADD CONSTRAINT "FK-user-comment" FOREIGN KEY ("userId") REFERENCES "user"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "comment" ADD CONSTRAINT "FK-feed-comment" FOREIGN KEY ("feedId") REFERENCES "feed"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`ALTER TABLE "comment" DROP CONSTRAINT "FK-feed-comment"`);
        await queryRunner.query(`ALTER TABLE "comment" DROP CONSTRAINT "FK-user-comment"`);
        await queryRunner.query(`ALTER TABLE "feed" DROP CONSTRAINT "FK-user-feed"`);
        await queryRunner.query(`ALTER TABLE "feed" DROP CONSTRAINT "FK-geo_mark-feed"`);
        await queryRunner.query(`ALTER TABLE "report_history" DROP CONSTRAINT "FK-user-report_history"`);
        await queryRunner.query(`ALTER TABLE "report_history" DROP CONSTRAINT "FK-feed-report_history"`);
        await queryRunner.query(`ALTER TABLE "recommend_history" DROP CONSTRAINT "FK-user-recommend_history"`);
        await queryRunner.query(`ALTER TABLE "recommend_history" DROP CONSTRAINT "FK-feed-recommend_history"`);
        await queryRunner.query(`ALTER TABLE "geo_mark" DROP CONSTRAINT "FK-road_address-geo_mark"`);
        await queryRunner.query(`ALTER TABLE "geo_mark" DROP CONSTRAINT "FK-address-geo_mark"`);
        await queryRunner.query(`ALTER TABLE "geo_mark" DROP CONSTRAINT "FK-region_info-geo_mark"`);
        await queryRunner.query(`DROP TABLE "comment"`);
        await queryRunner.query(`DROP TABLE "user"`);
        await queryRunner.query(`DROP TYPE "public"."user_mbtitype_enum"`);
        await queryRunner.query(`DROP TABLE "feed"`);
        await queryRunner.query(`DROP TABLE "report_history"`);
        await queryRunner.query(`DROP TABLE "recommend_history"`);
        await queryRunner.query(`DROP TYPE "public"."recommend_history_type_enum"`);
        await queryRunner.query(`DROP TABLE "polygon_info"`);
        await queryRunner.query(`DROP TYPE "public"."polygon_info_regiontype_enum"`);
        await queryRunner.query(`DROP TABLE "geo_mark"`);
        await queryRunner.query(`DROP TYPE "public"."geo_mark_regiontype_enum"`);
        await queryRunner.query(`DROP TYPE "public"."geo_mark_type_enum"`);
        await queryRunner.query(`DROP TABLE "road_address"`);
        await queryRunner.query(`DROP TABLE "region_info"`);
        await queryRunner.query(`DROP TYPE "public"."region_info_regiontype_enum"`);
        await queryRunner.query(`DROP TABLE "address"`);
        await queryRunner.query(`DROP TABLE "admin"`);
    }

}
